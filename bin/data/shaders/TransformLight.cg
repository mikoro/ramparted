void transformLight_vp(	float4 position : POSITION,
						float3 normal : NORMAL,
						out float4 oPosition : POSITION,
						out float4 color : COLOR,
						uniform float4x4 worldViewProj,
						uniform float3 globalAmbient,
						uniform float3 lightColor,
						uniform float3 lightPosition,
						uniform float3 eyePosition,
						uniform float3 Ke,
						uniform float3 Ka,
						uniform float3 Kd,
						uniform float3 Ks,
						uniform float shininess)
{
	oPosition = mul(worldViewProj, position);

	float3 P = position.xyz;
	float3 N = normal;

	// Compute emissive term
	float3 emissive = Ke;

	// Compute ambient term
	float3 ambient = Ka * globalAmbient;

	// Compute the diffuse term
	float3 L = normalize(lightPosition - P);
	float diffuseLight = max(dot(N, L), 0);
	float3 diffuse = Kd * lightColor * diffuseLight;

	// Compute the specular term
	float3 V = normalize(eyePosition - P);
	float3 H = normalize(L + V);
	float specularLight = pow(max(dot(N, H), 0), shininess);
	if (diffuseLight <= 0) specularLight = 0;
	float3 specular = Ks * lightColor * specularLight;

	color.xyz = emissive + ambient + diffuse + specular;
	color.w = 1;
}

void transformLight_vp_pass(float4 position : POSITION,
						float3 normal : NORMAL,
						out float4 oPosition : POSITION,
						out float3 objectPos : TEXCOORD0,
						out float3 oNormal : TEXCOORD1,
						uniform float4x4 worldViewProj)
{
	oPosition = mul(worldViewProj, position);
	objectPos = position.xyz;
	oNormal = normal;
}

void transformLight_fp(	float4 position : TEXCOORD0,                        
						float3 normal : TEXCOORD1,
						out float4 color : COLOR,
						uniform float3 globalAmbient,
						uniform float3 lightColor,
						uniform float3 lightPosition,
						uniform float3 eyePosition,
						uniform float3 Ke,
						uniform float3 Ka,
						uniform float3 Kd,
						uniform float3 Ks,
						uniform float shininess)
{
	float3 P = position.xyz;
	float3 N = normalize(normal);

	// Compute emissive term
	float3 emissive = Ke;

	// Compute ambient term
	float3 ambient = Ka * globalAmbient;

	// Compute the diffuse term
	float3 L = normalize(lightPosition - P);
	float diffuseLight = max(dot(L, N), 0);
	float3 diffuse = Kd * lightColor * diffuseLight;

	// Compute the specular term
	float3 V = normalize(eyePosition - P);
	float3 H = normalize(L + V);
	float specularLight = pow(max(dot(H, N), 0), shininess);
	if (diffuseLight <= 0) specularLight = 0;
	float3 specular = Ks * lightColor * specularLight;

	color.xyz = emissive + ambient + diffuse + specular;
	color.w = 1;
}

